@inject HttpClient HttpClient


<div class="dialog-title">
    <h2>@Pizza.Special.Name</h2>
    @Pizza.Special.Description
</div>

<form class="dialog-body">
    <div>
        <label>Size:</label>

        <input type="range"
               min="@Pizza.MinimumSize"
               max="@Pizza.MaximumSize"
               step="1"
               @bind="Pizza.Size"
               @bind:event="oninput" />

        <span class="size-label">
            @(Pizza.Size)" (£@(Pizza.GetFormattedTotalPrice()))
        </span>
    </div>

    <div>
        <label>Extra Toppings:</label>
        @if (toppings == null)
        {
            <select class="custom-select" disabled>
                <option>(loading...)</option>
            </select>
        }
        else if (Pizza.Toppings.Count >= 6)
        {
            <div>(maximum reached)</div>
        }
        else
        {
            <select class="custom-select" @onchange="ToppingSelected">
                <option value="-1" disabled selected>(select)</option>
                @foreach (var topping in toppings)
                {
                    <option value="@topping.Name">@topping.Name - (£@(topping.GetFormattedPrice()))</option>
                }
            </select>
        }
    </div>

    <div class="toppings">
        @foreach (var topping in Pizza.Toppings)
        {
            <div class="topping">
                @topping.Topping.Name
                <span class="topping-price">@topping.Topping.GetFormattedPrice()</span>
                <button type="button" class="delete-topping" @onclick="@(() => RemoveTopping(topping.Topping))">x</button>
            </div>
        }
    </div>
</form>

<div class="dialog-buttons">
    <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>

    <span class="mr-center">
        Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
    </span>

    <button class="btn btn-success ml-auto" @onclick="OnConfirm">Order</button>
</div>

@code {
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public Pizza Pizza { get; set; }

    public List<Topping> toppings;

    protected override async Task OnInitializedAsync()
    {
        toppings = await HttpClient.GetFromJsonAsync<List<Topping>>("toppings");
    }

    void ToppingSelected(ChangeEventArgs e)
    {
        var toppingName = (string)e.Value;

        if (!string.IsNullOrWhiteSpace(toppingName))
        {
            AddTopping(toppings.Single(t => t.Name == toppingName));
        }
    }

    void AddTopping(Topping topping)
    {
        if (Pizza.Toppings.Find(pt => pt.Topping == topping) == null)
        {
            Pizza.Toppings.Add(new PizzaTopping() { Topping = topping });
        }
    }

    void RemoveTopping(Topping topping)
    {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }
}